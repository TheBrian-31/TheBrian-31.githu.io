{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/react-google-one-tap-login@0.1.1_react@18.3.1/node_modules/react-google-one-tap-login/src/useScript.ts", "../../node_modules/.pnpm/react-google-one-tap-login@0.1.1_react@18.3.1/node_modules/react-google-one-tap-login/src/useGoogleOneTapLogin.ts", "../../node_modules/.pnpm/react-google-one-tap-login@0.1.1_react@18.3.1/node_modules/react-google-one-tap-login/src/index.ts"],
  "sourcesContent": ["// https://usehooks.com/useScript/\nimport { useState, useEffect } from 'react';\n\nexport default function useScript(src: string): string {\n  // Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\n  const [status, setStatus] = useState<string>(src ? 'loading' : 'idle');\n\n  useEffect(\n    () => {\n      // Allow falsy src value if waiting on other data needed for\n      // constructing the script URL passed to this hook.\n      if (!src) {\n        setStatus('idle');\n        return;\n      }\n\n      // Fetch existing script element by src\n      // It may have been added by another intance of this hook\n      let script: HTMLScriptElement | null = document.querySelector(\n        `script[src=\"${src}\"]`,\n      );\n\n      if (!script) {\n        // Create script\n        script = document.createElement('script');\n        script.src = src;\n        script.async = true;\n        script.setAttribute('data-status', 'loading');\n        // Add script to document body\n        document.body.appendChild(script);\n\n        // Store status in attribute on script\n        // This can be read by other instances of this hook\n        const setAttributeFromEvent = (event: Event) => {\n          !!script &&\n            script.setAttribute(\n              'data-status',\n              event.type === 'load' ? 'ready' : 'error',\n            );\n        };\n\n        script.addEventListener('load', setAttributeFromEvent);\n        script.addEventListener('error', setAttributeFromEvent);\n      } else {\n        // Grab existing script status from attribute and set to state.\n        setStatus(script.getAttribute('data-status') || 'idle');\n      }\n\n      // Script event handler to update status in state\n      // Note: Even if the script already exists we still need to add\n      // event handlers to update the state for *this* hook instance.\n      const setStateFromEvent = (event: Event) => {\n        setStatus(event.type === 'load' ? 'ready' : 'error');\n      };\n\n      // Add event listeners\n      script.addEventListener('load', setStateFromEvent);\n      script.addEventListener('error', setStateFromEvent);\n\n      // Remove event listeners on cleanup\n      return () => {\n        if (script) {\n          script.removeEventListener('load', setStateFromEvent);\n          script.removeEventListener('error', setStateFromEvent);\n        }\n      };\n    },\n    [src], // Only re-run effect if script src changes\n  );\n\n  return status;\n}\n", "import { useEffect } from 'react';\nimport {\n  IUseGoogleOneTapLogin,\n  IGoogleCallbackResponse,\n  IGoogleEndPointResponse,\n} from './types';\nimport useScript from './useScript';\n\nconst scriptFlag: string = '__googleOneTapScript__';\nconst googleClientScriptURL: string = 'https://accounts.google.com/gsi/client';\nconst oauthEndpointURL: string =\n  'https://oauth2.googleapis.com/tokeninfo?id_token=';\n\nfunction callback({\n  data,\n  onError,\n  onSuccess,\n}: {\n  data: IGoogleCallbackResponse;\n  onError?: IUseGoogleOneTapLogin['onError'];\n  onSuccess?: IUseGoogleOneTapLogin['onSuccess'];\n}) {\n  if (data?.credential) {\n    fetch(`${oauthEndpointURL}${data.credential}`)\n      .then((resp) => {\n        if (resp?.status === 200 && resp?.json) {\n          return resp.json();\n        } else {\n          if (onError) {\n            onError();\n          }\n          throw new Error('Something went wrong');\n        }\n      })\n      .then((resp: IGoogleEndPointResponse) => {\n        if (onSuccess) {\n          onSuccess(resp);\n        }\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n        }\n        throw error;\n      });\n  }\n}\n\nexport function useGoogleOneTapLogin({\n  onError,\n  disabled,\n  onSuccess,\n  googleAccountConfigs,\n  disableCancelOnUnmount = false,\n}: IUseGoogleOneTapLogin) {\n  const script = useScript(googleClientScriptURL);\n  // Use the user's custom callback if they specified one; otherwise use the default one defined above:\n  const callbackToUse = googleAccountConfigs.callback\n    ? googleAccountConfigs.callback\n    : (data: IGoogleCallbackResponse) => callback({ data, onError, onSuccess });\n\n  useEffect(() => {\n    if (!window?.[scriptFlag] && window.google && script === 'ready') {\n      window.google.accounts.id.initialize({\n        ...googleAccountConfigs,\n        callback: callbackToUse,\n      });\n      window[scriptFlag] = true;\n    }\n    if (window?.[scriptFlag] && script === 'ready' && !disabled) {\n      window.google.accounts.id.prompt();\n\n      return () => {\n        if (!disableCancelOnUnmount) {\n          window.google.accounts.id.cancel();\n        }\n      };\n    }\n  }, [script, window?.[scriptFlag], disabled]);\n\n  return null;\n}\n", "import { memo } from 'react';\nimport { IGoogleOneTapLogin } from './types';\nimport { useGoogleOneTapLogin } from './useGoogleOneTapLogin';\n\nfunction GoogleOneTapLogin({ children = null, ...props }: IGoogleOneTapLogin) {\n  useGoogleOneTapLogin(props);\n  return children;\n}\n\nexport default memo(GoogleOneTapLogin);\n\nexport { useGoogleOneTapLogin };\n"],
  "mappings": "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",
  "names": []
}
